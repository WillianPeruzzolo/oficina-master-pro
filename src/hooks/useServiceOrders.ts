import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

export interface ServiceOrder {
  id: string;
  order_number: string;
  client_id: string;
  vehicle_id: string;
  description: string;
  diagnosis?: string;
  status?: string;
  priority?: string;
  mechanic_id?: string;
  total_labor?: number;
  total_parts?: number;
  total_amount?: number;
  started_at?: string;
  completed_at?: string;
  estimated_completion?: string;
  created_at: string;
  updated_at: string;
}

export function useServiceOrders() {
  return useQuery({
    queryKey: ["service_orders"],
    queryFn: async () => {
      const { data, error } = await supabase
        .from("service_orders")
        .select("*")
        .order("created_at", { ascending: false });

      if (error) throw error;
      return data as ServiceOrder[];
    },
  });
}

export function useCreateServiceOrder() {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  return useMutation({
    mutationFn: async (orderData: Omit<ServiceOrder, "id" | "order_number" | "created_at" | "updated_at">) => {
      // order_number is auto-generated by database trigger
      const { data, error } = await supabase
        .from("service_orders")
        .insert([orderData as any])
        .select()
        .single();

      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["service_orders"] });
      toast({
        title: "Ordem de serviço criada com sucesso!",
        description: "A OS foi adicionada ao sistema.",
      });
    },
    onError: (error) => {
      toast({
        title: "Erro ao criar ordem de serviço",
        description: error.message,
        variant: "destructive",
      });
    },
  });
}

export function useUpdateServiceOrder() {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  return useMutation({
    mutationFn: async ({ id, ...orderData }: Partial<ServiceOrder> & { id: string }) => {
      const { data, error } = await supabase
        .from("service_orders")
        .update(orderData)
        .eq("id", id)
        .select()
        .single();

      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["service_orders"] });
      toast({
        title: "Ordem de serviço atualizada com sucesso!",
        description: "As informações da OS foram atualizadas.",
      });
    },
    onError: (error) => {
      toast({
        title: "Erro ao atualizar ordem de serviço",
        description: error.message,
        variant: "destructive",
      });
    },
  });
}

export function useDeleteServiceOrder() {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  return useMutation({
    mutationFn: async (id: string) => {
      const { error } = await supabase
        .from("service_orders")
        .delete()
        .eq("id", id);

      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["service_orders"] });
      toast({
        title: "Ordem de serviço removida com sucesso!",
        description: "A OS foi removida do sistema.",
      });
    },
    onError: (error) => {
      toast({
        title: "Erro ao remover ordem de serviço",
        description: error.message,
        variant: "destructive",
      });
    },
  });
}